from config import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from keyboards import kbrd_menu, inline_dove, inline_bluetit, inline_thrush, inline_sparrow, inline_woodpecker, inline_cardinal
from aiogram.contrib.fsm_storage.memory import MemoryStorage


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ API Roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="jyxqZLcJ27mR9wFxBpUJ")
project = rf.workspace().project("birds-detection-fld02")
model = project.version(2).model


bot = Bot(TOKEN)  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
storage = MemoryStorage()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
dispatcher = Dispatcher(bot, storage=storage)  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


PROJECT_INFO = """
–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ç–∏—Ü –ø–æ —Ñ–æ—Ç–æ.
_____________________________________
üì∏ 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ç–∏—Ü 

ü¶Ö 2. –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ç–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 

üìö 3. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø—Ç–∏—Ü–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ 

   –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –æ ..." 
_____________________________________

–í –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ:
ü§ù <b>–ù–∞–∑–∞—Ä–æ–≤ –ú.–°</b> : –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞, 

ü§ù <b>–ù–æ–≤–∏–∫–æ–≤. –í.–í.</b> : –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è,

ü§ù <b>–ú–µ–ª—å–Ω–∏—Ü—ã–Ω –í.–í.</b> : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞

ü§ù <b>–ü–æ–ª–∏–≤–æ–¥–∞ –ê.–Æ.</b> : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
...

"""


START_TEXT = """
<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ç–∏—Ü üê¶‚Äç‚¨õÔ∏è</b>
"""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def bot_startup(dispatcher):
    print('Bot is running ...')


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–æ—Ç–∞
async def bot_shutup(dispatcher):
    # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–∏—à–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    print('Bot has gone ...')


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–û –ø—Ä–æ–µ–∫—Ç–µ"
@dispatcher.message_handler(Text(equals='–û –ø—Ä–æ–µ–∫—Ç–µ'))
async def proj_info(message: types.Message):
    await message.answer(text=f' {PROJECT_INFO} ',
                        parse_mode= "HTML")  # –í—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç "PROJECT_INFO"
    await message.delete()  # –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã "/start"
@dispatcher.message_handler(commands=['start'])
async def get_keyboard(message: types.Message):
    await message.answer(text=START_TEXT, parse_mode='HTML', reply_markup=kbrd_menu)  # –í—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç "START_TEXT" –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await bot.send_animation(chat_id=message.from_user.id, animation=open('img/presentation.gif', 'rb'))  # –í—ã–≤–æ–¥–∏—Ç—Å—è gif-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
    await message.delete()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dispatcher.message_handler(content_types=['photo'])
async def get_photo(message: types.Message):   
    await message.photo[-1].download('model/file.jpg')  #  –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    prediction = model.predict('model/file.jpg', confidence=40, overlap=30).json()  # –°–∫–∞—á–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª—å –ú–û –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è json —Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ç–∏—Ü–∞–º–∏
    model.predict("model/file.jpg", confidence=40, overlap=30).save("model/prediction.jpg") # –§–æ—Ç–æ —Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ç–∏—Ü–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    await message.delete()
    await bot.send_photo(chat_id=message.from_user.id, photo=open('model/prediction.jpg', 'rb'))  # –§–æ—Ç–æ —Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ç–∏—Ü–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–æ—Ç
    
    class_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ç–∏—Ü
    try:
        if prediction['predictions'] == []:
                await message.answer(text="""–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ç–∏—Ü ü§∑... –í–µ–¥—å —Ç–∞–∫? ü´£""")  # –ï—Å–ª–∏ –ø—Ç–∏—Ü—ã –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        for pred in prediction['predictions']:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ç–∏—Ü–∞–º–∏
            if pred['class'] not in class_list:  # –ï—Å–ª–∏ –ø—Ç–∏—Ü–∞ –µ—â–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞—Å—å –≤ –±–æ—Ç–µ
                if pred['class'] == "pigeon":  # –ï—Å–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ç–∏—Ü–∞ - –≥–æ–ª—É–±—å
                    # –í –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –ø—Ç–∏—Ü—ã –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∞ " –£–∑–Ω–∞—Ç—å –æ –≥–æ–ª—É–±–µ"
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/pigeon.jpg', 'rb'), caption='–ì–æ–ª—É–±—å', reply_markup=inline_dove)
                    class_list.append(pred['class'])  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ç–∏—Ü—ã –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ç–∏—Ü
                if pred['class'] == "tit":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/titmouse.jpg', 'rb'), caption='–°–∏–Ω–∏—Ü–∞', reply_markup=inline_bluetit)
                    class_list.append(pred['class'])

                if pred['class'] == "thrush":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/thrush.jpg', 'rb'), caption='–î—Ä–æ–∑–¥', reply_markup=inline_thrush,)
                    class_list.append(pred['class'])

                if pred['class'] == "sparrow":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/sparrow.jpg', 'rb'), caption='–í–æ—Ä–æ–±–µ–π', reply_markup=inline_sparrow)
                    class_list.append(pred['class'])
                    
                if pred['class'] == "woodpecker":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/woodpckr.jpg', 'rb'), caption='–î—è—Ç–µ–ª', reply_markup=inline_woodpecker)
                    class_list.append(pred['class'])

                if pred['class'] == "cardinal":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/cardinal.jpg', 'rb'), caption='–ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–¥–∏–Ω–∞–ª', reply_markup=inline_cardinal)
                    class_list.append(pred['class'])
    except IndexError:
        await message.answer(text="""–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ç–∏—Ü ü§∑... –í–µ–¥—å —Ç–∞–∫? ü´£""")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dispatcher=dispatcher,
                        on_startup=bot_startup,
                        skip_updates=True,
                        on_shutdown=bot_shutup)  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–æ—Ç–∞